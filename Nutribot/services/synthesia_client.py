import logging
import aiohttp
import json
import os
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class SynthesiaClient:
    """
    Client for interacting with Synthesia API to create AI videos.
    """
    
    def __init__(self):
        """Initialize the Synthesia client."""
        self.api_key = os.getenv('SYNTHESIA_API')
        if not self.api_key:
            raise ValueError("SYNTHESIA_API environment variable not found")
        
        self.base_url = "https://api.synthesia.io/v2"
        self.headers = {
            "Authorization": self.api_key,
            "Content-Type": "application/json"
        }
        
        logger.info(f"Using API endpoint: {self.base_url}")
        logger.info(f"API key format: {self.api_key[:10]}...{self.api_key[-4:]} (length: {len(self.api_key)})")
        
        logger.info("Synthesia client initialized")

    async def create_video(self, script: str, title: str = "NutriBot Advice") -> Optional[Dict]:
        """
        Create a video with the given script.
        
        Args:
            script: The text content for the video
            title: Title for the video
            
        Returns:
            Dictionary with video creation response or None if failed
        """
        try:
            # Use the correct Synthesia API v2 format with your template ID
            video_data = {
                "test": False,  # Production video (set to True for faster test videos)
                "title": title,
                "description": "Generated by NutriBot",
                "visibility": "private",
                "templateId": "31d4dd96-97aa-4e93-a753-f096a62a3d80",  # Your Nutribot Template
                "input": [{
                    "scriptText": script[:2000],  # Limit script length
                    "avatar": "anna_costume1_cameraA",  # Required field
                    "background": "green_screen"  # Required field
                }]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/videos",
                    headers=self.headers,
                    json=video_data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 201:
                        result = await response.json()
                        logger.info(f"Video creation started: {result.get('id')}")
                        return result
                    else:
                        error_text = await response.text()
                        logger.error(f"Synthesia API error: {response.status} - {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error creating video: {e}")
            return None

    async def get_video_status(self, video_id: str) -> Optional[Dict]:
        """
        Check the status of a video.
        
        Args:
            video_id: The ID of the video to check
            
        Returns:
            Dictionary with video status or None if failed
        """
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/videos/{video_id}",
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result
                    else:
                        logger.error(f"Failed to get video status: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error getting video status: {e}")
            return None

    async def get_video_download_url(self, video_id: str) -> Optional[str]:
        """
        Get the download URL for a completed video.
        
        Args:
            video_id: The ID of the video
            
        Returns:
            Download URL string or None if failed
        """
        try:
            status = await self.get_video_status(video_id)
            if status and status.get('status') == 'complete':
                return status.get('download')
            return None
            
        except Exception as e:
            logger.error(f"Error getting video download URL: {e}")
            return None